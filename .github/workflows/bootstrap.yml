# This is a basic workflow to help you get started with Actions

name: Bootstrap

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  workflow_dispatch:
    inputs:
      cluster:
        description: 'Current cluster to deploy'
        required: true
        default: 'my-gke-cluster'

env:
  GKE_CLUSTER: ${{ github.event.inputs.cluster }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  bootstrap:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@v0.2.1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: us-central1-a
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Set up helm
      - name: Set up Helm
        run: |-
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          helm upgrade --install --wait --timeout 300s -f api/values.yml argo-apps ./charts/bootstrap
#        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
#        ./kustomize build . | kubectl apply -f -
#        kubectl rollout status deployment/$DEPLOYMENT_NAME
#        kubectl get services -o wide
