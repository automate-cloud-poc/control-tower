{{- $name := .Values.name -}}
{{- $replicaCount := .Values.deploy.replicaCount -}}
{{- $repo := .Values.deploy.image.repository -}}
{{- $svcPort := .Values.service.port -}}

---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: api
  name: "{{ $name }}-configmap"
{{- if .Values.configMap }}
data:
{{- range $key,$value := .Values.configMap }}
  {{$key}}: {{$value}}
{{- end }}
{{- end }}

---

apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: "{{ $name }}-secret"
  namespace: api

{{- if .Values.sealedSecret }}
spec:
  encryptedData:
  {{- range $key,$value := .Values.sealedSecret }}
    {{$key}}: {{$value}}
  {{- end }}
{{- end }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $name }}"
  namespace: api
  labels:
    app.kubernetes.io/instance: "{{ $name }}"
    app.kubernetes.io/name: "{{ $name }}"
spec:
  replicas: {{ $replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: "{{ $name }}"
      app.kubernetes.io/name: "{{ $name }}"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ $name }}"
        app.kubernetes.io/instance: "{{ $name }}"
    spec:
      containers:
        - name: "{{ $name }}"
          image: "{{ $repo }}:{{ .Values.deploy.image.tag}}"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: {{ $svcPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
          readinessProbe:
            httpGet:
              path: /health
              port: http
          - env:
            envFrom:
              - configMapRef:
                  name: "{{ $name }}-configmap"
              - secretRef:
                  name: "{{ $name }}-secret"